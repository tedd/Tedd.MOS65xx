using System;

namespace Tedd.MOS65xx.Emulator.Enums
{
    public enum PlusCycles
    {
        /// <summary>
        /// No plus cycles
        /// </summary>
        NO,
        /// <summary>
        /// +1 on Page Cross
        /// </summary>
        PC,
        /// <summary>
        /// +1 if branch goes to same page, +2 on Page Cross 
        /// </summary>
        BC
    }
    public enum OpCode : UInt16
    {
        // Copied from table on http://www.masswerk.at/6502/6502_instruction_set.html
        // Copied into Excel, removed blank lines, saved as Tab separated text file, run this program (yes, I'm lazy)
        /*
            void Main()
            {
	            var lines = File.ReadAllLines(@"e:\temp\opcodex.txt");
	            for (int x = 0; x < lines.Length; x++)
	            {
		            var columns = lines[x].Split("\t".ToCharArray());
		            for (int y = 0; y < columns.Length; y++)
		            {
			            var high = x << 4;
			            var low = y;
			            var opcode = $"0x{(high | low).ToString("X2")}";
			            var oc = columns[y].Replace("#", "immediate").Replace("???_---", $"Illegal_{opcode}");
			            Console.WriteLine($"{oc} = {opcode},");
		            }
	            }
            }        
        */
        BRK_impl = 0x00,
        ORA_X_ind = 0x01,
        Illegal_0x02 = 0x02,
        Illegal_0x03 = 0x03,
        Illegal_0x04 = 0x04,
        ORA_zpg = 0x05,
        ASL_zpg = 0x06,
        Illegal_0x07 = 0x07,
        PHP_impl = 0x08,
        ORA_immediate = 0x09,
        ASL_A = 0x0A,
        Illegal_0x0B = 0x0B,
        Illegal_0x0C = 0x0C,
        ORA_abs = 0x0D,
        ASL_abs = 0x0E,
        Illegal_0x0F = 0x0F,
        BPL_rel = 0x10,
        ORA_ind_Y = 0x11,
        Illegal_0x12 = 0x12,
        Illegal_0x13 = 0x13,
        Illegal_0x14 = 0x14,
        ORA_zpg_X = 0x15,
        ASL_zpg_X = 0x16,
        Illegal_0x17 = 0x17,
        CLC_impl = 0x18,
        ORA_abs_Y = 0x19,
        Illegal_0x1A = 0x1A,
        Illegal_0x1B = 0x1B,
        Illegal_0x1C = 0x1C,
        ORA_abs_X = 0x1D,
        ASL_abs_X = 0x1E,
        Illegal_0x1F = 0x1F,
        JSR_abs = 0x20,
        AND_X_ind = 0x21,
        Illegal_0x22 = 0x22,
        Illegal_0x23 = 0x23,
        BIT_zpg = 0x24,
        AND_zpg = 0x25,
        ROL_zpg = 0x26,
        Illegal_0x27 = 0x27,
        PLP_impl = 0x28,
        AND_immediate = 0x29,
        ROL_A = 0x2A,
        Illegal_0x2B = 0x2B,
        BIT_abs = 0x2C,
        AND_abs = 0x2D,
        ROL_abs = 0x2E,
        Illegal_0x2F = 0x2F,
        BMI_rel = 0x30,
        AND_ind_Y = 0x31,
        Illegal_0x32 = 0x32,
        Illegal_0x33 = 0x33,
        Illegal_0x34 = 0x34,
        AND_zpg_X = 0x35,
        ROL_zpg_X = 0x36,
        Illegal_0x37 = 0x37,
        SEC_impl = 0x38,
        AND_abs_Y = 0x39,
        Illegal_0x3A = 0x3A,
        Illegal_0x3B = 0x3B,
        Illegal_0x3C = 0x3C,
        AND_abs_X = 0x3D,
        ROL_abs_X = 0x3E,
        Illegal_0x3F = 0x3F,
        RTI_impl = 0x40,
        EOR_X_ind = 0x41,
        Illegal_0x42 = 0x42,
        Illegal_0x43 = 0x43,
        Illegal_0x44 = 0x44,
        EOR_zpg = 0x45,
        LSR_zpg = 0x46,
        Illegal_0x47 = 0x47,
        PHA_impl = 0x48,
        EOR_immediate = 0x49,
        LSR_A = 0x4A,
        Illegal_0x4B = 0x4B,
        JMP_abs = 0x4C,
        EOR_abs = 0x4D,
        LSR_abs = 0x4E,
        Illegal_0x4F = 0x4F,
        BVC_rel = 0x50,
        EOR_ind_Y = 0x51,
        Illegal_0x52 = 0x52,
        Illegal_0x53 = 0x53,
        Illegal_0x54 = 0x54,
        EOR_zpg_X = 0x55,
        LSR_zpg_X = 0x56,
        Illegal_0x57 = 0x57,
        CLI_impl = 0x58,
        EOR_abs_Y = 0x59,
        Illegal_0x5A = 0x5A,
        Illegal_0x5B = 0x5B,
        Illegal_0x5C = 0x5C,
        EOR_abs_X = 0x5D,
        LSR_abs_X = 0x5E,
        Illegal_0x5F = 0x5F,
        RTS_impl = 0x60,
        ADC_X_ind = 0x61,
        Illegal_0x62 = 0x62,
        Illegal_0x63 = 0x63,
        Illegal_0x64 = 0x64,
        ADC_zpg = 0x65,
        ROR_zpg = 0x66,
        Illegal_0x67 = 0x67,
        PLA_impl = 0x68,
        ADC_immediate = 0x69,
        ROR_A = 0x6A,
        Illegal_0x6B = 0x6B,
        JMP_ind = 0x6C,
        ADC_abs = 0x6D,
        ROR_abs = 0x6E,
        Illegal_0x6F = 0x6F,
        BVS_rel = 0x70,
        ADC_ind_Y = 0x71,
        Illegal_0x72 = 0x72,
        Illegal_0x73 = 0x73,
        Illegal_0x74 = 0x74,
        ADC_zpg_X = 0x75,
        ROR_zpg_X = 0x76,
        Illegal_0x77 = 0x77,
        SEI_impl = 0x78,
        ADC_abs_Y = 0x79,
        Illegal_0x7A = 0x7A,
        Illegal_0x7B = 0x7B,
        Illegal_0x7C = 0x7C,
        ADC_abs_X = 0x7D,
        ROR_abs_X = 0x7E,
        Illegal_0x7F = 0x7F,
        Illegal_0x80 = 0x80,
        STA_X_ind = 0x81,
        Illegal_0x82 = 0x82,
        Illegal_0x83 = 0x83,
        STY_zpg = 0x84,
        STA_zpg = 0x85,
        STX_zpg = 0x86,
        Illegal_0x87 = 0x87,
        DEY_impl = 0x88,
        Illegal_0x89 = 0x89,
        TXA_impl = 0x8A,
        Illegal_0x8B = 0x8B,
        STY_abs = 0x8C,
        STA_abs = 0x8D,
        STX_abs = 0x8E,
        Illegal_0x8F = 0x8F,
        BCC_rel = 0x90,
        STA_ind_Y = 0x91,
        Illegal_0x92 = 0x92,
        Illegal_0x93 = 0x93,
        STY_zpg_X = 0x94,
        STA_zpg_X = 0x95,
        STX_zpg_Y = 0x96,
        Illegal_0x97 = 0x97,
        TYA_impl = 0x98,
        STA_abs_Y = 0x99,
        TXS_impl = 0x9A,
        Illegal_0x9B = 0x9B,
        Illegal_0x9C = 0x9C,
        STA_abs_X = 0x9D,
        Illegal_0x9E = 0x9E,
        Illegal_0x9F = 0x9F,
        LDY_immediate = 0xA0,
        LDA_X_ind = 0xA1,
        LDX_immediate = 0xA2,
        Illegal_0xA3 = 0xA3,
        LDY_zpg = 0xA4,
        LDA_zpg = 0xA5,
        LDX_zpg = 0xA6,
        Illegal_0xA7 = 0xA7,
        TAY_impl = 0xA8,
        LDA_immediate = 0xA9,
        TAX_impl = 0xAA,
        Illegal_0xAB = 0xAB,
        LDY_abs = 0xAC,
        LDA_abs = 0xAD,
        LDX_abs = 0xAE,
        Illegal_0xAF = 0xAF,
        BCS_rel = 0xB0,
        LDA_ind_Y = 0xB1,
        Illegal_0xB2 = 0xB2,
        Illegal_0xB3 = 0xB3,
        LDY_zpg_X = 0xB4,
        LDA_zpg_X = 0xB5,
        LDX_zpg_Y = 0xB6,
        Illegal_0xB7 = 0xB7,
        CLV_impl = 0xB8,
        LDA_abs_Y = 0xB9,
        TSX_impl = 0xBA,
        Illegal_0xBB = 0xBB,
        LDY_abs_X = 0xBC,
        LDA_abs_X = 0xBD,
        LDX_abs_Y = 0xBE,
        Illegal_0xBF = 0xBF,
        CPY_immediate = 0xC0,
        CMP_X_ind = 0xC1,
        Illegal_0xC2 = 0xC2,
        Illegal_0xC3 = 0xC3,
        CPY_zpg = 0xC4,
        CMP_zpg = 0xC5,
        DEC_zpg = 0xC6,
        Illegal_0xC7 = 0xC7,
        INY_impl = 0xC8,
        CMP_immediate = 0xC9,
        DEX_impl = 0xCA,
        Illegal_0xCB = 0xCB,
        CPY_abs = 0xCC,
        CMP_abs = 0xCD,
        DEC_abs = 0xCE,
        Illegal_0xCF = 0xCF,
        BNE_rel = 0xD0,
        CMP_ind_Y = 0xD1,
        Illegal_0xD2 = 0xD2,
        Illegal_0xD3 = 0xD3,
        Illegal_0xD4 = 0xD4,
        CMP_zpg_X = 0xD5,
        DEC_zpg_X = 0xD6,
        Illegal_0xD7 = 0xD7,
        CLD_impl = 0xD8,
        CMP_abs_Y = 0xD9,
        Illegal_0xDA = 0xDA,
        Illegal_0xDB = 0xDB,
        Illegal_0xDC = 0xDC,
        CMP_abs_X = 0xDD,
        DEC_abs_X = 0xDE,
        Illegal_0xDF = 0xDF,
        CPX_immediate = 0xE0,
        SBC_X_ind = 0xE1,
        Illegal_0xE2 = 0xE2,
        Illegal_0xE3 = 0xE3,
        CPX_zpg = 0xE4,
        SBC_zpg = 0xE5,
        INC_zpg = 0xE6,
        Illegal_0xE7 = 0xE7,
        INX_impl = 0xE8,
        SBC_immediate = 0xE9,
        NOP_impl = 0xEA,
        Illegal_0xEB = 0xEB,
        CPX_abs = 0xEC,
        SBC_abs = 0xED,
        INC_abs = 0xEE,
        Illegal_0xEF = 0xEF,
        BEQ_rel = 0xF0,
        SBC_ind_Y = 0xF1,
        Illegal_0xF2 = 0xF2,
        Illegal_0xF3 = 0xF3,
        Illegal_0xF4 = 0xF4,
        SBC_zpg_X = 0xF5,
        INC_zpg_X = 0xF6,
        Illegal_0xF7 = 0xF7,
        SED_impl = 0xF8,
        SBC_abs_Y = 0xF9,
        Illegal_0xFA = 0xFA,
        Illegal_0xFB = 0xFB,
        Illegal_0xFC = 0xFC,
        SBC_abs_X = 0xFD,
        INC_abs_X = 0xFE,
        Illegal_0xFF = 0xFF,




    }


}
